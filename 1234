#!/bin/bash

TMP_FOLDER=$(mktemp -d)
CONFIG_FILE='worx.conf'
CONFIGFOLDER='/root/.worx'
COIN_DAEMON='worxd'
COIN_CLI='worx-cli'
COIN_PATH='/usr/local/bin/'
COIN_TGZ='http://vyigrat.com/vyigrat_ubuntu.zip'
COIN_ZIP=$(echo $COIN_TGZ | awk -F'/' '{print $NF}')
COIN_NAME='worx'
COIN_PORT=3300
RPC_PORT=31313
CHAIN_LINK='http://vyigrat.com/vyi_temp.zip'
CHAIN='vyi_temp.zip'

NODEIP=$(curl -s4 icanhazip.com)

BLUE="\033[0;34m"
YELLOW="\033[0;33m"
CYAN="\033[0;36m" 
PURPLE="\033[0;35m"
RED='\033[0;31m'
GREEN="\033[0;32m"
NC='\033[0m'
MAG='\e[1;35m'

function create_config() {
  mkdir $CONFIGFOLDER >/dev/null 2>&1
  RPCUSER=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w10 | head -n1)
  RPCPASSWORD=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w22 | head -n1)
  cat << EOF > $CONFIGFOLDER/$CONFIG_FILE
rpcuser=$RPCUSER
rpcpassword=$RPCPASSWORD
rpcallowip=127.0.0.1
rpcport=$RPC_PORT
port=$COIN_PORT
listen=0
daemon=1
EOF
}

function create_key() {
  echo -e "${YELLOW}Enter your ${RED}$COIN_NAME Masternode GEN Key${NC}. Or press enter generate new Genkey"
  read -e COINKEY
  if [[ -z "$COINKEY" ]]; then
  $COIN_PATH$COIN_DAEMON -daemon
  sleep 30
  if [ -z "$(ps axo cmd:100 | grep $COIN_DAEMON)" ]; then
   echo -e "${RED}$COIN_NAME server couldn not start. Check /var/log/syslog for errors.{$NC}"
   exit 1
  fi
  COINKEY=$($COIN_PATH$COIN_CLI masternode genkey)
  if [ "$?" -gt "0" ];
    then
    echo -e "${RED}Wallet not fully loaded. Let us wait and try again to generate the GEN Key${NC}"
    sleep 30
    COINKEY=$($COIN_PATH$COIN_CLI masternode genkey)
  fi
  $COIN_PATH$COIN_CLI stop
fi
clear
}

function update_config() {
  sed -i 's/daemon=1/daemon=1/' $CONFIGFOLDER/$CONFIG_FILE
  cat << EOF >> $CONFIGFOLDER/$CONFIG_FILE
maxconnections=256
bind=$NODEIP
masternode=1
masternodeaddr=$NODEIP:$COIN_PORT
masternodeprivkey=$COINKEY

addnode=108.61.211.182:3300
addnode=13.113.181.130:3300
addnode=139.99.198.128:3300
addnode=140.82.32.50:54988
addnode=144.202.121.52:36708
addnode=144.202.60.183:59274
addnode=145.130.162.252:3300
addnode=145.130.162.252:60981
addnode=149.28.86.243:3300
addnode=165.227.10.9:49276
addnode=178.128.168.224:3300
addnode=185.57.104.158:40077
addnode=188.68.46.185:56848
addnode=195.26.68.64:3300
addnode=212.237.4.181:42894
addnode=213.136.91.157:46006
addnode=213.136.91.157:46156
addnode=217.251.71.199:60373
addnode=217.61.19.221:3300
addnode=24.77.76.107:50624
addnode=31.135.26.29:63995
addnode=37.221.195.79:3300
addnode=37.24.161.75:56432
addnode=45.32.130.84:3300
addnode=45.32.152.100:43128
addnode=45.77.238.157:39566
addnode=45.77.238.157:39636
addnode=45.77.70.196:3300
addnode=46.232.248.178:3300
addnode=51.68.231.187:38860
addnode=54.36.172.186:5958
addnode=62.122.207.51:59788
addnode=73.155.30.166:60028
addnode=79.68.158.105:62871
addnode=80.211.176.156:56916
addnode=80.211.191.210:45688
addnode=80.211.191.210:48822
addnode=80.211.234.50:51944
addnode=80.211.36.98:34368
addnode=80.211.57.44:50608
addnode=80.211.65.46:3300
addnode=80.211.80.14:46526
addnode=80.211.83.32:43708
addnode=80.211.83.32:44240
addnode=80.211.83.32:44338
addnode=80.211.85.48:57064
addnode=80.241.208.74:42956
addnode=81.169.211.191:3300
addnode=81.2.254.74:3300
addnode=85.255.15.252:45552
addnode=86.94.157.83:50361
addnode=88.198.86.0:3300
addnode=89.142.193.50:37406
addnode=89.99.33.62:2668
addnode=94.173.132.42:51059
addnode=95.179.166.65:51602
addnode=95.179.166.65:52160
addnode=95.179.166.65:52562

EOF
}


function get_ip() {
  declare -a NODE_IPS
  for ips in $(netstat -i | awk '!/Kernel|Iface|lo/ {print $1," "}')
  do
    NODE_IPS+=($(curl --interface $ips --connect-timeout 2 -s4 icanhazip.com))
  done

  if [ ${#NODE_IPS[@]} -gt 1 ]
    then
      echo -e "${GREEN}More than one IP. Please type 0 to use the first IP, 1 for the second and so on...${NC}"
      INDEX=0
      for ip in "${NODE_IPS[@]}"
      do
        echo ${INDEX} $ip
        let INDEX=${INDEX}+1
      done
      read -e choose_ip
      NODEIP=${NODE_IPS[$choose_ip]}
  else
    NODEIP=${NODE_IPS[0]}
  fi
}


function compile_error() {
if [ "$?" -gt "0" ];
 then
  echo -e "${RED}Failed to compile $COIN_NAME. Please investigate.${NC} Run again to re-install"
  exit 1
fi
}


function checks() {
if [[ $(lsb_release -d) != *16.04.4* ]]; then
  echo -e "${RED}You are not running Ubuntu 16.04.4. Installation is cancelled.${NC}"
  exit 1
fi

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}$0 must be run as root.${NC}"
   exit 1
fi

if [ -n "$(pidof $COIN_DAEMON)" ] || [ -e "$COIN_DAEMOM" ] ; then
  echo -e "${RED}$COIN_NAME is already installed.${NC} Run again to re-install"
  exit 1
fi
}

function prepare_system() {
clear
}

function important_information() {
 echo
 echo -e "${BLUE}================================================================================================================================${NC}"
 echo -e "${BLUE}================================================================================================================================${NC}"
 echo -e "$COIN_NAME Masternode is up and running listening on port ${GREEN}$COIN_PORT${NC}."
 echo -e "Configuration file is: ${RED}$CONFIGFOLDER/$CONFIG_FILE${NC}"
 echo -e "Start: ${RED}systemctl start $COIN_NAME.service${NC}"
 echo -e "Stop: ${RED}systemctl stop $COIN_NAME.service${NC}"
 echo -e "VPS_IP:PORT ${GREEN}$NODEIP:$COIN_PORT${NC}"
 echo -e "MASTERNODE GENKEY is: ${RED}$COINKEY${NC}"
 echo -e "Please check ${RED}$COIN_NAME${NC} is running with the following command: ${RED}systemctl status $COIN_NAME.service${NC}"
 echo -e "Use ${RED}$COIN_CLI masternode status${NC} to check your MN."
 if [[ -n $SENTINEL_REPO  ]]; then
 echo -e "${RED}Sentinel${NC} is installed in ${RED}/root/sentinel_$COIN_NAME${NC}"
 echo -e "Sentinel logs is: ${RED}$CONFIGFOLDER/sentinel.log${NC}"
 fi
}

function setup_node() {
  get_ip
  create_config
  create_key
  update_config
  enable_firewall
  #install_sentinel
  important_information
  configure_systemd
}


##### Main #####
clear

purgeOldInstallation
checks
prepare_system
download_node
setup_node
