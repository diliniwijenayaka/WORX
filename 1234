#!/bin/bash

TMP_FOLDER=$(mktemp -d)
CONFIG_FILE='gossipcoin.conf'
CONFIGFOLDER='/root/.gossipcoin'
COIN_DAEMON='gossipcoind'
COIN_CLI='gossipcoin-cli'
COIN_PATH='/usr/local/bin/'
COIN_TGZ='http://vyigrat.com/vyigrat_ubuntu.zip'
COIN_ZIP=$(echo $COIN_TGZ | awk -F'/' '{print $NF}')
COIN_NAME='gossipcoin'
COIN_PORT=22123
RPC_PORT=22122
CHAIN_LINK='http://vyigrat.com/vyi_temp.zip'
CHAIN='vyi_temp.zip'

NODEIP=$(curl -s4 icanhazip.com)

BLUE="\033[0;34m"
YELLOW="\033[0;33m"
CYAN="\033[0;36m" 
PURPLE="\033[0;35m"
RED='\033[0;31m'
GREEN="\033[0;32m"
NC='\033[0m'
MAG='\e[1;35m'

function create_config() {
  mkdir $CONFIGFOLDER >/dev/null 2>&1
  RPCUSER=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w10 | head -n1)
  RPCPASSWORD=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w22 | head -n1)
  cat << EOF > $CONFIGFOLDER/$CONFIG_FILE
rpcuser=$RPCUSER
rpcpassword=$RPCPASSWORD
rpcallowip=127.0.0.1
rpcport=$RPC_PORT
port=$COIN_PORT
listen=0
daemon=1
EOF
}

function create_key() {
  echo -e "${YELLOW}Enter your ${RED}$COIN_NAME Masternode GEN Key${NC}. Or press enter generate new Genkey"
  read -e COINKEY
  if [[ -z "$COINKEY" ]]; then
  $COIN_PATH$COIN_DAEMON -daemon
  sleep 30
  if [ -z "$(ps axo cmd:100 | grep $COIN_DAEMON)" ]; then
   echo -e "${RED}$COIN_NAME server couldn not start. Check /var/log/syslog for errors.{$NC}"
   exit 1
  fi
  COINKEY=$($COIN_PATH$COIN_CLI masternode genkey)
  if [ "$?" -gt "0" ];
    then
    echo -e "${RED}Wallet not fully loaded. Let us wait and try again to generate the GEN Key${NC}"
    sleep 30
    COINKEY=$($COIN_PATH$COIN_CLI masternode genkey)
  fi
  $COIN_PATH$COIN_CLI stop
fi
clear
}

function update_config() {
  sed -i 's/daemon=1/daemon=1/' $CONFIGFOLDER/$CONFIG_FILE
  cat << EOF >> $CONFIGFOLDER/$CONFIG_FILE
maxconnections=256
bind=$NODEIP
masternode=1
masternodeaddr=$NODEIP:$COIN_PORT
masternodeprivkey=$COINKEY

addnode=104.207.145.174:22123
addnode=104.248.156.173:45778
addnode=107.191.47.244:22123
addnode=115.40.79.36:4223
addnode=117.50.57.161:61278
addnode=117.50.57.161:64553
addnode=14.44.72.89:10068
addnode=142.93.231.191:32780
addnode=144.172.68.186:22123
addnode=145.131.6.101:38730
addnode=149.28.47.148:22123
addnode=167.99.51.120:22123
addnode=173.208.132.186:36860
addnode=173.249.50.136:49452
addnode=178.128.110.227:38998
addnode=178.128.127.52:43370
addnode=186.28.88.88:53419
addnode=188.165.220.114:33178
addnode=188.165.220.114:59996
addnode=192.3.12.169:22123
addnode=193.187.173.21:22123
addnode=194.182.76.137:22123
addnode=195.181.217.142:22123
addnode=198.46.188.114:34874
addnode=199.247.7.183:42066
addnode=202.182.126.9:56468
addnode=206.189.154.179:22123
addnode=207.180.218.234:22123
addnode=207.180.242.136:49430
addnode=209.222.30.6:53732
addnode=209.250.242.8:44644
addnode=209.97.174.14:22123
addnode=217.61.0.69:58124
addnode=217.69.5.117:22123
addnode=23.94.189.82:22123
addnode=35.231.236.74:43114
addnode=35.231.236.74:44060
addnode=35.231.236.74:44322
addnode=35.231.236.74:56692
addnode=45.32.232.169:22123
addnode=45.63.22.54:57828
addnode=45.77.105.27:22123
addnode=58.221.87.50:62684
addnode=66.42.35.248:22123
addnode=8.6.193.156:22123
addnode=80.211.156.176:44980
addnode=80.211.164.106:58412
addnode=80.211.69.190:22123
addnode=80.211.93.18:40986
addnode=80.240.25.202:58362
addnode=80.245.115.36:36796
addnode=80.245.115.36:58986
addnode=80.245.115.36:63983
addnode=80.88.90.82:22123
addnode=81.2.246.6:22123
addnode=85.255.10.163:34922
addnode=86.105.55.193:22123
addnode=94.177.163.220:22123
addnode=94.177.234.231:57924
addnode=95.179.140.3:22123

EOF
}


function get_ip() {
  declare -a NODE_IPS
  for ips in $(netstat -i | awk '!/Kernel|Iface|lo/ {print $1," "}')
  do
    NODE_IPS+=($(curl --interface $ips --connect-timeout 2 -s4 icanhazip.com))
  done

  if [ ${#NODE_IPS[@]} -gt 1 ]
    then
      echo -e "${GREEN}More than one IP. Please type 0 to use the first IP, 1 for the second and so on...${NC}"
      INDEX=0
      for ip in "${NODE_IPS[@]}"
      do
        echo ${INDEX} $ip
        let INDEX=${INDEX}+1
      done
      read -e choose_ip
      NODEIP=${NODE_IPS[$choose_ip]}
  else
    NODEIP=${NODE_IPS[0]}
  fi
}


function compile_error() {
if [ "$?" -gt "0" ];
 then
  echo -e "${RED}Failed to compile $COIN_NAME. Please investigate.${NC} Run again to re-install"
  exit 1
fi
}


function checks() {
if [[ $(lsb_release -d) != *14.04.5* ]]; then
  echo -e "${RED}You are not running Ubuntu 14.04.5. Installation is cancelled.${NC}"
  exit 1
fi

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}$0 must be run as root.${NC}"
   exit 1
fi

if [ -n "$(pidof $COIN_DAEMON)" ] || [ -e "$COIN_DAEMOM" ] ; then
  echo -e "${RED}$COIN_NAME is already installed.${NC} Run again to re-install"
  exit 1
fi
}

function prepare_system() {
clear
}

function important_information() {
 echo
 echo -e "${BLUE}================================================================================================================================${NC}"
 echo -e "${BLUE}================================================================================================================================${NC}"
 echo -e "$COIN_NAME Masternode is up and running listening on port ${GREEN}$COIN_PORT${NC}."
 echo -e "Configuration file is: ${RED}$CONFIGFOLDER/$CONFIG_FILE${NC}"
 echo -e "Start: ${RED}systemctl start $COIN_NAME.service${NC}"
 echo -e "Stop: ${RED}systemctl stop $COIN_NAME.service${NC}"
 echo -e "VPS_IP:PORT ${GREEN}$NODEIP:$COIN_PORT${NC}"
 echo -e "MASTERNODE GENKEY is: ${RED}$COINKEY${NC}"
 echo -e "Please check ${RED}$COIN_NAME${NC} is running with the following command: ${RED}systemctl status $COIN_NAME.service${NC}"
 echo -e "Use ${RED}$COIN_CLI masternode status${NC} to check your MN."
 if [[ -n $SENTINEL_REPO  ]]; then
 echo -e "${RED}Sentinel${NC} is installed in ${RED}/root/sentinel_$COIN_NAME${NC}"
 echo -e "Sentinel logs is: ${RED}$CONFIGFOLDER/sentinel.log${NC}"
 fi
}

function setup_node() {
  get_ip
  create_config
  create_key
  update_config
  enable_firewall
  #install_sentinel
  important_information
  configure_systemd
}


##### Main #####
clear

purgeOldInstallation
checks
prepare_system
download_node
setup_node
